module lift/triples

import immutable/list

def testAppend() =
  println([1,2,3].append([4,5,6]))

effect Flip(): Boolean
effect Fail[A](): A
effect Out(t: Tuple3[Int, Int, Int]): Unit

def choice(n : Int): Int / { Flip, Fail } =
  if (n < 1) {
    do Fail()
  } else if (do Flip()) {
    n
  } else {
    choice(n - 1)
  }

def triple(n: Int, s: Int) = {
  val i = choice(n);
  val j = choice(i - 1);
  val k = choice(j - 1);
  if ((i + j + k) == s) {
    (i, j ,k)
  } else {
    do Fail()
  }
}

def handledList(n : Int, s : Int): List[Tuple3[Int, Int, Int]] =
  try {
    try { Cons(triple(n, s), Nil()) }
    with Fail { Nil() }
  } with Flip { resume(true).append(resume(false)) }


def handledTriple(n : Int, s : Int): Unit / Out =
  try {
    try { Out(triple(n, s)) }
    with Fail { () }
  } with Flip { resume(true); resume(false) }

def main() = // handledList(8, 8)
  measure(30, 30) { handledList(100, 15); () }

  // try {
  //   handledTriple(100, 15)
  // } with Out { t =>
  //   println(t)
  //   resume(())
  // }
