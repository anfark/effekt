module lift/test

effect Tick(): Unit
effect Ignore(): Unit

def f(): Int / {} = {
  try {
    val x = 4
    val y = 5
    try { // (ev43, Ignore) =>
      // x = x + 1
      // y = y + 1
      Tick() // Tick(ev43) == Tick(Lift)
      // lift(Tick())
      // lift         = 1      = x => ...
      // here         = 0      = x => x
      // nested(x, y) = x + y  = a => x(y(a))
      // Tick(lift)
    } with Ignore { resume(()) }
    x + y
  } with Tick { resume(()) }
}


def recursive(n: Int): Int =
  if (n <= 0) n else try { recursive(n - 1) } with Tick { 4 }

def testBlockLift() = {
  def hof { f: () => Unit }: Unit = try {
    f()
  } with Ignore { resume(()) }

  def f() = Tick()

  try { // ev67 =>
    // hof(ev, liftBlock(ev, f))
    // capabilities as functions from evidence to cap.
    hof { () => // ev68 =>
      f() // ev68 + ev67
    }
  } with Tick { resume(()) }
}

def main() = f()








// def fprint(): Int / Console = {
//   val x = 4
//   println(x)
//   val y = 5
//   println(y)
//   x + y
// }

// effect Tick(): Unit
// effect Tick2(): Unit


// def testBlockLift() = {
//   def hof { f: () => Unit }: Unit = f()
//   def f() = ()

//   try { // ev =>
//     // hof(ev, liftBlock(ev, f))
//     // capabilities as functions from evidence to cap.
//     hof { () => f() }
//   } with Tick { resume(()) }
// }

// def simple() = try {
//   Tick();
//   1
// } with Tick { resume(()) + 2 }

// def multiple() =
//   try {
//     Tick();
//     Tick2();
//     1
//   }
//   with Tick { println("Tick"); resume(()) + 1 }
//   with Tick2 { println("Tick 2"); resume(()) + 2 }

// def multipleNested() =
//   try {
//     try {
//       Tick();
//       Tick2();
//       Tick();
//       Tick2();
//       1
//     } with Tick { println("Tick"); resume(()) + 1 }
//   } with Tick2 { println("Tick 2"); resume(()) + 2 }


// def g() = try {
//   f()
// } with Tick { try { resume(()) } with Tick { 4; resume(()) } }

// def h { f: () => Int / Tick }: Int = {
//   def i() = try {
//     Tick2();
//     f() + f()
//   } with Tick2 { resume(()) }

//   try {
//     i()
//   } with Tick { resume(()) }
// }

// def main() = try {
//   // def f = [ev]{ () => ... cap[ev]() ... }
//   // try { ...
//   // h[ev](f)
//   // h([ev] => liftBlock[lift](f)[ev])
//   // h { [ev] => f[ev . lift]() }

//   // h([ev] => Flip => liftBlock[lift](f)[ev](Flip))
//   h { () =>
//     println("f!");
//     Tick2()
//     42
//   }
//   // }
// } with Tick2 { println("outside"); resume(()) }